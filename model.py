import numpy as np
import matplotlib.pyplot as plt

class Model:
    def __init__(self, k0, thickness):
        self.k0 = k0
        self.thick = thickness
        elements = []

    def conductivity(self, x, y):
        return self.k0

    def thickness(self, x, y):
        return self.thick

    def head(self,x,y):
        """ 
        Summary:
        Returns the head above the aquifer base generated by the model
        Note:
        this accounts for the aquifer thickness so that it can handle 
        confined or unconfined sections
        """
        k = self.conductivity(x,y)
        h = self.thickness(x,y)

        phi = self.potential(x,y)

        if phi.real > (0.5 * k * pow(h, 2)):
            head = (phi.real + 0.5 * k * pow(h,2)) / (k * h)
        else:
            head = np.sqrt(2 * phi.real / k)

        return head

    def pot_from_head(self, head, x, y):
        """
        Summary: 
        Takes an external head value at a position and returns the
        corresponding real potential in the aquifer
        Note:
        this accounts for the aquifer thickness so that it can handle 
        confined or unconfined sections
        """
        k = self.conductivity(x,y)
        h = self.thickness(x,y)

        if head < h:
            pot = 0.5 * k * pow(head, 2)
        else:
            pot = k * h * head - 0.5 * k * pow(h, 2)

        return pot

    def potential(self, x, y):
        """ Evaluates the potential of every element in the model.
        Returns a complex number 
        """
        if self.elements != []:
            phi = complex(0., 0.)
            for el in self.elements:
                phi += el.potential
        else:
            raise(IndexError)
            
        return phi

    def solve(self, tolerance, max_iterations):
        # for each element, iterate so that each element can be solved 
        # without the contribution of the potential from the other elements 

        return 0

    def plot_flow_net(self, x_min, x_max, y_min, y_max, 
            nx = 50, ny = 50):
        """plots the real and the complex part of the potential in a flow net.
        If the potential has a divergence term the complex part is omitted
        """
        x_lin = np.linspace(x_min, x_max, nx)
        y_lin = np.linspace(y_min, y_max, ny)
        x, y = np.meshgrid(x_lin, y_lin)
        phi = np.zeros(nx, ny)
        psi = np.zeros(nx, ny)

        for i in xrange(length(x_lin)):
            for j in xrange(len(y_lin)):
                pot = self.potential(x_lin[i], y_lin[j])
                phi[i][j] = pot.real
                psi[i][j] = pot.imag

        return 0
